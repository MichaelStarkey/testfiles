# -*- coding: utf-8 -*-
"""submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nonnd024D5xhzG_VpdJnkB07gXOeM1WY
"""

#!/usr/bin/env python

import numpy as np
import urllib

# urllib.urlretrieve('https://raw.githubusercontent.com/MichaelStarkey/testfiles/master/X_train.csv', 'X_train.csv')
# urllib.urlretrieve('https://raw.githubusercontent.com/MichaelStarkey/testfiles/master/X_test.csv', 'X_test.csv')
# urllib.urlretrieve('https://raw.githubusercontent.com/MichaelStarkey/testfiles/master/y_train.csv', 'y_train.csv')


# Load training and testing data
X_train = np.loadtxt('X_train.csv', delimiter=',', skiprows=1)
X_test = np.loadtxt('X_test.csv', delimiter=',', skiprows=1)
y_train = np.loadtxt('y_train.csv', delimiter=',', skiprows=1)[:,1]

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)

# simple linear regression
ones = np.ones((168,1))
print(ones.shape)
X = np.concatenate((ones, X_train), axis=1)
t = y_train

XX = np.dot(X.T,X)
invXX = np.linalg.inv(XX)
Xt = np.dot(X.T,t)
w = np.dot(invXX,Xt)

# Fit model and predict test values
# y_pred = np.random.randint(y_train.min(), y_train.max(), X_test.shape[0])
testones = np.ones((41,1))
testX = np.concatenate((testones, X_test), axis=1)
y_pred = np.dot(testX, w)

# Arrange answer in two columns. First column (with header "Id") is an
# enumeration from 0 to n-1, where n is the number of test points. Second
# column (with header "EpiOrStroma" is the predictions.
test_header = "Id,PRP"
n_points = X_test.shape[0]
y_pred_pp = np.ones((n_points, 2))
y_pred_pp[:, 0] = range(n_points)
y_pred_pp[:, 1] = y_pred
np.savetxt('my_submission.csv', y_pred_pp, fmt='%d', delimiter=",",
           header=test_header, comments="")

# Note: fmt='%d' denotes that all values should be formatted as integers which
# is appropriate for classification. For regression, where the second column
# should be floating point, use fmt='%d,%f'.

"""# New Section"""
